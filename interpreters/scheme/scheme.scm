(define (void) (if #f 1))

(define (bind-args args values)
  (cond
    ((and (null? args) (null? values)) '())
    ((pair? args) (cons (cons (car args) (car values)) (bind-args (cdr args) (cdr values))))
    ((symbol? args) (list (cons args values)))
    (else (begin (display "args binding failed")
                 (newline)
                 (display args)
                 (newline)
                 (display values)
                 (newline)
                 'error))))

(define (fapply f args)
  (cond
    ((is-builtin-function? f) (apply (get-builtin-function f) args))
    ((is-closure? f) (feval
                      (cons 'begin (get-closure-body f))
                      (make-env (bind-args (get-closure-args f) args) (get-closure-env f))))
    (else  (display "bad function: ")
           (display f)
           (newline)
           'error)))

(define (fapply-multiargs f . args)
  (define (get-args lst)
    (if (null? (cdr lst))
        (car lst)
        (cons (car lst) (get-args (cdr lst)))))
  (fapply f (get-args args)))

(define (expand-macro-helper f args)
  (feval 
   (cons 'begin (get-macro-body f))
   (make-env (bind-args (get-macro-args f) args) (get-macro-env f))))

(define (feval exp env)
  ;(display exp) (newline)
  (cond
    ((symbol? exp) (env-get env exp))
    ((number? exp) exp)
    ((string? exp) exp)
    ((vector? exp) exp)
    ((boolean? exp) exp)
    ((char? exp) exp)
    ((tagged-with? exp 'set!) (let ((key (cadr exp))
                                    (value (feval (caddr exp) env)))
                                (env-set! env key value)))
    ((tagged-with? exp 'eval) (feval (feval (cadr exp) env) env))
    ((tagged-with? exp 'begin) (letrec ((helper 
                                         (lambda (exps)
                                           (cond ((null? exps) (void))
                                                 ((null? (cdr exps)) (feval (car exps) env))
                                                 (else (begin
                                                         (feval (car exps) env)
                                                         (helper (cdr exps))))))))
                                 (helper (cdr exp))))
    ((tagged-with? exp 'define) (if (pair? (cadr exp))
                                    (feval (list 'define (caadr exp) 
                                                 (append (list 'lambda (cdadr exp)) (cddr exp)))
                                           env)
                                    (let ((key (cadr exp))
                                          (value (feval (caddr exp) env)))
                                      (env-define! env key value))))
    ((tagged-with? exp 'lambda) (make-closure (cadr exp) (cddr exp) env))
    ((tagged-with? exp 'macro) (make-macro (cadr exp) (cddr exp) env))
    ((tagged-with? exp 'quote) (cadr exp))
    ((tagged-with? exp 'if) (if (feval (cadr exp) env)
                                (feval (caddr exp) env)
                                (if (= 4 (length exp))
                                    (feval (cadddr exp) env))))
    ((tagged-with? exp 'expand-macro)
     (let ((f (feval (caadr exp) env)))
       (if (is-macro? f)
           (expand-macro-helper f (cdadr exp))
           (begin (display "args binding failed")
                  (newline)
                  (display args)
                  (newline)
                  (display values)
                  (newline)
                  'error))))
    (else
     (let ((f (feval (car exp) env)))
       (cond
         ((is-macro? f) (feval (expand-macro-helper f (cdr exp)) env))
         (else (fapply f (map (lambda (arg) (feval arg env)) (cdr exp)))))))))

(define (is-closure? f) (and (procedure? f) (eq? 'closure (f '__type))))
(define (make-closure args body env)
  (lambda (x) (cond 
                ((eq? x '__type) 'closure)
                ((eq? x '__args) args)
                ((eq? x '__body) body)
                ((eq? x '__env) env))))
(define (get-closure-args f) (f '__args))
(define (get-closure-body f) (f '__body))
(define (get-closure-env f) (f '__env))

(define (is-macro? f) (and (procedure? f) (eq? 'macro (f '__type))))
(define (make-macro args body env)
  (lambda (x) (cond 
                ((eq? x '__type) 'macro)
                ((eq? x '__args) args)
                ((eq? x '__body) body)
                ((eq? x '__env) env))))
(define (get-macro-args f) (f '__args))
(define (get-macro-body f) (f '__body))
(define (get-macro-env f) (f '__env))

(define (make-builtin-function f)
  (lambda (x) (cond 
                ((eq? x '__type) 'builtin-function)
                ((eq? x '__function) f))))
(define (is-builtin-function? f) (and (procedure? f) (eq? 'builtin-function (f '__type))))
(define (get-builtin-function f) (f '__function))

(define (tagged-with? exp tag) (and (pair? exp) (eq? tag (car exp))))

(define (env-get env key) ((env 'get) key))
(define (env-set! env k v) ((env 'set) k v))
(define (env-define! env k v) ((env 'define) k v))


(define (fload fname)
  (let ((port (open-input-file fname)))
    (define (loop)
      (let ((exp (read port)))
        (if (eof-object? exp)
            (close-input-port port)
            (begin
              (feval exp global-env)
              (loop)))))
    (loop)))

(define (make-env frame parent)
  (define (get-binding key lst)
    (cond
      ((null? lst) (if (null? parent)
                       '()
                       ((parent 'get-binding) key)))
      ((eq? key (caar lst)) (car lst))
      (else (get-binding key (cdr lst)))))
  (define (get-helper key)
    (let ((binding (get-binding key frame)))
      (if (null? binding)
          (begin (display "undefined key: ")
                 (display key)
                 (newline)
                 'undefined)
          (cdr binding))))
  (lambda (op)
    (cond
      ((eq? op 'get-keys) (map car frame))
      ((eq? op 'get-binding) (lambda (k) (get-binding k frame)))
      ((eq? op 'get) get-helper)
      ((eq? op 'set) (lambda (k v) 
                       (let ((binding (get-binding k frame)))
                         (if (null? binding)
                             (set! frame (cons (cons k v) frame))
                             (set-cdr! binding v)))))
      ((eq? op 'define) (lambda (k v) (set! frame (cons (cons k v) frame)))))))


(define global-env (make-env (list
                              (cons '+ (make-builtin-function +))
                              (cons '- (make-builtin-function -))
                              (cons '* (make-builtin-function *))
                              (cons '/ (make-builtin-function /))
                              (cons 'quotient (make-builtin-function quotient))
                              (cons 'remainder (make-builtin-function remainder))
                              (cons 'modulo (make-builtin-function modulo))
                              (cons '> (make-builtin-function >))
                              (cons '< (make-builtin-function <))
                              (cons '>= (make-builtin-function >=))
                              (cons '<= (make-builtin-function <=))
                              (cons '= (make-builtin-function =))
                              (cons 'eq? (make-builtin-function eq?))
                              (cons 'eqv? (make-builtin-function eqv?))
                              (cons 'equal? (make-builtin-function equal?))
                              (cons 'car (make-builtin-function car))
                              (cons 'cadr (make-builtin-function cadr))
                              (cons 'caar (make-builtin-function caar))
                              (cons 'caadr (make-builtin-function caadr))
                              (cons 'caddr (make-builtin-function caddr))
                              (cons 'cadddr (make-builtin-function cadddr))
                              (cons 'cdddr (make-builtin-function cdddr))
                              (cons 'cdadr (make-builtin-function cdadr))
                              (cons 'cdar (make-builtin-function cdar))
                              (cons 'cddr (make-builtin-function cddr))
                              (cons 'cadar (make-builtin-function cadar))
                              (cons 'caddar (make-builtin-function caddar))
                              (cons 'assv (make-builtin-function assv))
                              (cons 'pair? (make-builtin-function pair?))
                              (cons 'even? (make-builtin-function even?))
                              (cons 'odd? (make-builtin-function odd?))
                              (cons 'list? (make-builtin-function list?))
                              (cons 'number? (make-builtin-function number?))
                              (cons 'symbol? (make-builtin-function symbol?))
                              (cons 'procedure? (make-builtin-function procedure?))
                              (cons 'cdr (make-builtin-function cdr))
                              (cons 'set-car! (make-builtin-function set-car!))
                              (cons 'set-cdr! (make-builtin-function set-cdr!))
                              (cons 'cons (make-builtin-function cons))
                              (cons 'list (make-builtin-function list))
                              (cons 'null? (make-builtin-function null?))
                              (cons 'char? (make-builtin-function char?))
                              (cons 'boolean? (make-builtin-function boolean?))
                              (cons 'newline (make-builtin-function newline))
                              (cons 'display (make-builtin-function display))
                              (cons 'read (make-builtin-function read))
                              (cons 'write (make-builtin-function write))
                              (cons 'length (make-builtin-function length))
                              (cons 'open-input-file (make-builtin-function open-input-file))
                              (cons 'eof-object? (make-builtin-function eof-object?))
                              (cons 'close-input-port (make-builtin-function close-input-port))
                              (cons 'char=? (make-builtin-function char=?))
                              (cons 'char<? (make-builtin-function char<?))
                              (cons 'char>? (make-builtin-function char>?))
                              (cons 'char<=? (make-builtin-function char<=?))
                              (cons 'char>=? (make-builtin-function char>=?))
                              (cons 'char-ci=? (make-builtin-function char-ci=?))
                              (cons 'char-ci<? (make-builtin-function char-ci<?))
                              (cons 'char-ci>? (make-builtin-function char-ci>?))
                              (cons 'char-ci<=? (make-builtin-function char-ci<=?))
                              (cons 'char-ci>=? (make-builtin-function char-ci>=?))
                              (cons 'char-alphabetic? (make-builtin-function char-alphabetic?))
                              (cons 'char-numeric? (make-builtin-function char-numeric?))
                              (cons 'char-whitespace? (make-builtin-function char-whitespace?))
                              (cons 'char-upper-case? (make-builtin-function char-upper-case?))
                              (cons 'char-lower-case? (make-builtin-function char-lower-case?))
                              (cons 'integer->char (make-builtin-function integer->char))
                              (cons 'char-upcase (make-builtin-function char-upcase))
                              (cons 'char-downcase (make-builtin-function char-downcase))
                              (cons 'char->integer (make-builtin-function char->integer))
                              (cons 'string? (make-builtin-function string?))
                              (cons 'make-string (make-builtin-function make-string))
                              (cons 'string-length (make-builtin-function string-length))
                              (cons 'string-ref (make-builtin-function string-ref))
                              (cons 'substring (make-builtin-function substring))
                              (cons 'string-append (make-builtin-function string-append))
                              (cons 'string=? (make-builtin-function string=?))
                              (cons 'string>? (make-builtin-function string>?))
                              (cons 'string<? (make-builtin-function string<?))
                              (cons 'string>=? (make-builtin-function string>=?))
                              (cons 'string<=? (make-builtin-function string<=?))
                              (cons 'string-set! (make-builtin-function string-set!))
                              (cons 'string (make-builtin-function string))
                              (cons 'string-ci=? (make-builtin-function string-ci=?))
                              (cons 'string-ci>? (make-builtin-function string-ci>?))
                              (cons 'string-ci<? (make-builtin-function string-ci<?))
                              (cons 'string-ci>=? (make-builtin-function string-ci>=?))
                              (cons 'string-ci<=? (make-builtin-function string-ci<=?))
                              (cons 'string->symbol (make-builtin-function string->symbol))
                              (cons 'number->string (make-builtin-function number->string))
                              (cons 'vector? (make-builtin-function vector?))
                              (cons 'vector-set! (make-builtin-function vector-set!))
                              (cons 'vector-ref (make-builtin-function vector-ref))
                              (cons 'vector-length (make-builtin-function vector-length))
                              (cons 'vector-set! (make-builtin-function vector-set!))
                              (cons 'make-vector (make-builtin-function make-vector))
                              (cons 'vector (make-builtin-function vector))
                              (cons 'vector->list (make-builtin-function vector->list))
                              (cons 'symbol->string (make-builtin-function symbol->string))
                              (cons 'gcd (make-builtin-function gcd))
                              (cons 'abs (make-builtin-function abs))
                              (cons 'sqrt (make-builtin-function sqrt))
                              (cons 'max (make-builtin-function max))
                              (cons 'min (make-builtin-function min))
                              (cons 'lcm (make-builtin-function lcm))
                              (cons 'not (make-builtin-function not))
                              (cons 'call-with-output-file (make-builtin-function (lambda (filename proc)
                                                                                    (let ((p (open-output-file filename)))
                                                                                      (let ((v (fapply proc (list p))))
                                                                                        (close-output-port p)
                                                                                        v)))))
                              (cons 'call-with-input-file (make-builtin-function (lambda (filename proc)
                                                                                    (let ((p (open-input-file filename)))
                                                                                      (let ((v (fapply proc (list p))))
                                                                                        (close-input-port p)
                                                                                        v)))))
                              (cons 'input-port? (make-builtin-function input-port?))
                              (cons 'output-port? (make-builtin-function output-port?))
                              (cons 'current-output-port (make-builtin-function current-output-port))
                              (cons 'current-input-port (make-builtin-function current-input-port))
                              (cons 'zero? (make-builtin-function zero?))
                              (cons 'negative? (make-builtin-function negative?))
                              (cons 'positive? (make-builtin-function positive?))
                              (cons 'list-ref (make-builtin-function list-ref))
                              (cons 'reverse (make-builtin-function reverse))
                              (cons 'assoc (make-builtin-function assoc))
                              (cons 'memv (make-builtin-function memv))
                              (cons 'string->number (make-builtin-function string->number))
                              (cons 'exact? (make-builtin-function exact?))
                              (cons 'inexact? (make-builtin-function inexact?))
                              (cons 'integer? (make-builtin-function integer?))
                              (cons 'rational? (make-builtin-function rational?))
                              (cons 'complex? (make-builtin-function complex?))
                              (cons 'real? (make-builtin-function real?))
                              (cons 'read-char (make-builtin-function read-char))
                              (cons 'write-char (make-builtin-function write-char))
                              (cons 'peek-char (make-builtin-function peek-char))
                              (cons 'open-output-file (make-builtin-function open-output-file))
                              (cons 'open-input-file (make-builtin-function open-input-file))
                              (cons 'load (make-builtin-function fload))
                              (cons 'list->string (make-builtin-function list->string))
                              (cons 'string->list (make-builtin-function string->list))
                              (cons 'list->vector (make-builtin-function list->vector))
                              (cons 'vector->list (make-builtin-function vector->list))
                              (cons 'apply (make-builtin-function fapply-multiargs))
                              (cons 'round (make-builtin-function round))
                              (cons 'close-output-port (make-builtin-function close-output-port))
                              (cons 'close-input-port (make-builtin-function close-input-port))
                              (cons 'exact->inexact (make-builtin-function exact->inexact))
                              (cons 'call-with-current-continuation (make-builtin-function 
                                                                     (lambda (f)
                                                                       (call-with-current-continuation (lambda (g) (fapply f (list (make-builtin-function g))))))))
                              )
                             '()))

(define (fload-display fname)
  (let ((port (open-input-file fname)))
    (define (loop)
      (let ((exp (read port)))
        (if (eof-object? exp)
            (close-input-port port)
            (let ((res (feval exp global-env)))
              (if (not (eq? (void) res))
                  (begin (newline)
                         (display "result: ")
                         (display res)
                         (newline)))
              (loop)))))
    (loop)))

(fload "lib.scm")

